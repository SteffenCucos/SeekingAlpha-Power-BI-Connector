let
	Generic.Fetch = (url as text, content as text, headers as record) =>
	let
	    requestBody = [
            ManualStatusHandling = {400,401,403,404,422,429,500,503},
            Headers = Record.Combine({[#"Content-Type"="application/json"], headers})
        ],

        newRequestBody =
                if content = null then
                    Record.AddField(requestBody, "Content", Text.ToBinary(""))
                else if content <> "" then
                    Record.AddField(requestBody, "Content", Text.ToBinary(content))
                else
                    requestBody,

        // If content is null it means we want to make an empty POST request
        // If content is "" then we want to make do a GET request
        // Otherwise it makes a POST request with the provided content
        response = Diagnostics.Trace(
            TraceLevel.Critical,
            "Request URL = '" & url & "'\n" &
            "Request Body = '" & Text.FromCustom(newRequestBody) & "'\n",

            () => Web.Contents(url, newRequestBody),
            true
        )
	in
	    response,

    Text.FromCustom = (value as any) =>
        if Value.Is(value, type null) then
            "null"
        else if Value.Is(value, type record) then
            @Record.ToText(value)
        else if Value.Is(value, type list) then
            @List.ToText(value)
        else if Value.Is(value, type logical) then
            Text.From(value)
        else if Value.Is(value, type text) <> true then
            Text.From(value)
        else
            """" & Text.From(value) & """",


    Record.ToText = (record as record) =>
    let
        text = 
            if Record.FieldCount(record) = 0 then
                ""
            else 
                List.Accumulate(
                    Record.FieldNames(record), 
                    "", 
                    (state, current) => 
                    let
                        value = Record.Field(record, current),
                        text = Text.FromCustom(value)
                    in
                       if state = "" then
                            state & Text.FromCustom(current) & ":" & text
                       else
                            state & "," & Text.FromCustom(current) & ":" & text
                )
    in
       "{" & text & "}",

    List.ToText = (list as list) =>
    let
        text = 
            if List.Count(list) = 0 then 
                ""
            else
                List.Accumulate(
                    list,
                    "",
                    (state, current) =>
                    let
                        text = Text.FromCustom(current)
                    in
                        if state = "" then
                            state & text
                        else
                            state & "," & text
                )
    in
       "[" & text & "]",


    Response.Handle = (response, success, failure) =>
    let
        responseMetadata = Value.Metadata(response),
        responseCode = responseMetadata[Response.Status], 

        handled = if responseCode < 300 then 
            success(response)
        else 
            failure(response)            
    in
        handled,

    Portfolio.Fetch = (Cookie as record) => 
    let
        Portfolios = 
            Generic.Fetch(
                "https://seekingalpha.com/api/v3/account/dummy/portfolios?include=tickers",
                "",
                Cookie
            )

    in
        //Portfolios
        Response.Handle(Portfolios, (response) => Json.Document(response)[included], Text.FromBinary),


    Stock.FetchChart = (symbol as text, period as text) =>
    let
        url = "https://finance.api.seekingalpha.com/v2/chart?period=" & period & "&symbol=" & symbol,
        data = Generic.Fetch(
                url,
                "",
                []
            )
    in
        Response.Handle(data, Json.Document, Text.FromBinary),

    Table.ToNavigationTable = (rows as list) as table =>
    let
        keyColumns = {"Key"},
        nameColumn = "Name",
        dataColumn = "Data",
        itemKindColumn = "ItemKind",
        itemNameColumn = "ItemName",
        isLeafColumn = "IsLeaf",
        table = #table({"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, rows),
        tableType = Value.Type(table),
        newTableType = Type.AddTableKey(tableType, keyColumns, true) meta 
        [
            NavigationTable.NameColumn = nameColumn, 
            NavigationTable.DataColumn = dataColumn,
            NavigationTable.ItemKindColumn = itemKindColumn, 
            Preview.DelayColumn = itemNameColumn, 
            NavigationTable.IsLeafColumn = isLeafColumn
        ],
        navigationTable = Value.ReplaceType(table, newTableType)
    in
        navigationTable

in 
	[
		Generic.Fetch = Generic.Fetch,
        Portfolio.Fetch = Portfolio.Fetch,
        Stock.FetchChart = Stock.FetchChart,
        Table.ToNavigationTable = Table.ToNavigationTable
	]   